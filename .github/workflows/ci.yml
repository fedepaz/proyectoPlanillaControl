# .github/workflows/ci.yml
name: CI - Bulletproof Testing

on:
  # Run on ANY push to ANY branch
  push:
    branches: ["**"]
  # Also run on pull requests
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ci-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # Job 1: Setup dependencies (shared by all other jobs)
  setup-dependencies:
    name: üì¶ Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3

      - name: Cache Backend Dependencies
        id: backend-cache
        uses: actions/cache@v3
        with:
          path: backEnd/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backEnd/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Cache Frontend Dependencies
        id: frontend-cache
        uses: actions/cache@v3
        with:
          path: frontEnd/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontEnd/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install Backend Dependencies
        if: steps.backend-cache.outputs.cache-hit != 'true'
        working-directory: ./backEnd
        run: pnpm install --frozen-lockfile

      - name: Install Frontend Dependencies
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        working-directory: ./frontEnd
        run: pnpm install --frozen-lockfile

  # Job 2: Backend tests (all of them in parallel)
  backend-tests:
    name: üß™ Backend Tests
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    strategy:
      matrix:
        test-suite:
          [
            index,
            dataRoute,
            planillaRoute,
            oficialRoute,
            personalEmpresaRoute,
            personalSeguridadRoute,
          ]
      fail-fast: false
    defaults:
      run:
        working-directory: ./backEnd
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3

      - name: Restore Backend Dependencies
        uses: actions/cache@v3
        with:
          path: backEnd/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backEnd/pnpm-lock.yaml') }}

      - name: Run ${{ matrix.test-suite }} tests
        run: pnpm test:${{ matrix.test-suite }}

  # Job 3: Frontend validation
  frontend-validation:
    name: üé® Frontend Lint & Build
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    defaults:
      run:
        working-directory: ./frontEnd
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3

      - name: Restore Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: frontEnd/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontEnd/pnpm-lock.yaml') }}

      - name: Run ESLint
        run: pnpm lint

      - name: Build for production
        run: pnpm build

  # Job 4: Security audit
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    needs: [setup-dependencies]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.3

      - name: Restore Backend Dependencies
        uses: actions/cache@v3
        with:
          path: backEnd/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backEnd/pnpm-lock.yaml') }}

      - name: Restore Frontend Dependencies
        uses: actions/cache@v3
        with:
          path: frontEnd/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontEnd/pnpm-lock.yaml') }}

      - name: Backend Security Audit
        working-directory: ./backEnd
        run: pnpm audit --audit-level moderate

      - name: Frontend Security Audit
        working-directory: ./frontEnd
        run: pnpm audit --audit-level moderate

  # Job 5: Protection check - BLOCK main branch direct pushes
  branch-protection-check:
    name: üõ°Ô∏è Branch Protection Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Block direct push to main
        run: |
          echo "üö´ DIRECT PUSH TO MAIN DETECTED!"
          echo "üí° Please use Pull Requests for main branch changes"
          echo "üìã Proper workflow:"
          echo "   1. git checkout -b feature/your-feature"
          echo "   2. Make changes and commit"
          echo "   3. git push origin feature/your-feature"
          echo "   4. Create Pull Request on GitHub"
          echo "   5. Wait for CI to pass"
          echo "   6. Merge PR manually"
          exit 1

  # Job 6: Final validation summary
  ci-complete:
    name: ‚úÖ CI Validation Complete
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-validation, security-audit]
    if: always()
    steps:
      - name: Check all validations
        run: |
          echo "üîç CI Results Summary:"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Validation: ${{ needs.frontend-validation.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [[ "${{ needs.backend-tests.result }}" == "success" && 
                "${{ needs.frontend-validation.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "üéâ All CI checks passed!"
            
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "‚úÖ PR ready for manual review and merge"
            else
              echo "‚úÖ Branch is healthy"
            fi
          else
            echo "‚ùå Some CI checks failed - fix required"
            exit 1
          fi
