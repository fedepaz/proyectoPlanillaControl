# .github/workflows/deploy-production.yml
name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      ["frontEnd/**", "backEnd/**", ".github/workflows/deploy-production.yml"]

concurrency:
  group: deploy-production
  cancel-in-progress: false # No cancelar deploys de producción

jobs:
  # Tests obligatorios antes de producción
  wait-for-tests:
    name: Wait for Tests to Pass
    runs-on: ubuntu-latest
    steps:
      - name: Wait for backend tests
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-regexp: "test-backend.*"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success
        timeout-minutes: 15

      - name: Wait for frontend tests
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "test-frontend"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success
        timeout-minutes: 10

  # Detectar cambios para producción
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backEnd/**'
            frontend:
              - 'frontEnd/**'

  # Desplegar Backend a Producción
  deploy-backend-production:
    name: 🚀 Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: [wait-for-tests, detect-changes]
    if: needs.detect-changes.outputs.backend == 'true'
    environment:
      name: production
      url: ${{ secrets.PROD_BACKEND_URL }}
    steps:
      - name: Deploy to Render Production
        run: |
          echo "🚀 Deploying backend to PRODUCTION..."
          response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "${{ secrets.RENDER_DEPLOY_HOOK_BACKEND_PROD }}")
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

          if [ "$http_code" -ne 200 ] && [ "$http_code" -ne 201 ]; then
            echo "❌ Production deploy hook failed with status: $http_code"
            exit 1
          fi
          echo "✅ Backend production deploy initiated"

      - name: Health check backend production
        run: |
          echo "⏳ Waiting for backend production deployment..."
          sleep 120

          for i in {1..25}; do
            if curl -f -s --max-time 15 "${{ secrets.PROD_BACKEND_URL }}/health" > /dev/null 2>&1; then
              echo "✅ Backend production deployed successfully!"
              echo "🔗 Production API: ${{ secrets.PROD_BACKEND_URL }}"
              exit 0
            fi
            echo "⏳ Health check $i/25... (waiting 30s)"
            sleep 30
          done

          echo "❌ Backend production deployment failed!"
          exit 1

  # Desplegar Frontend a Producción
  deploy-frontend-production:
    name: 🚀 Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: [wait-for-tests, detect-changes, deploy-backend-production]
    if: always() && needs.detect-changes.outputs.frontend == 'true' && (needs.deploy-backend-production.result == 'success' || needs.deploy-backend-production.result == 'skipped')
    environment:
      name: production
      url: ${{ secrets.PROD_FRONTEND_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.3

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: frontEnd/node_modules
          key: ${{ runner.os }}-pnpm-frontend-${{ hashFiles('frontEnd/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-frontend-

      - name: Install dependencies
        working-directory: ./frontEnd
        run: pnpm install --frozen-lockfile

      - name: Build for production
        working-directory: ./frontEnd
        env:
          VITE_API_URL: ${{ secrets.PROD_BACKEND_URL }}
          VITE_ENV: production
          NODE_ENV: production
        run: pnpm build

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./frontEnd
          vercel-args: "--prod"

      - name: Health check frontend production
        run: |
          echo "⏳ Waiting for frontend production deployment..."
          sleep 30

          for i in {1..10}; do
            if curl -f -s --max-time 10 "${{ secrets.PROD_FRONTEND_URL }}" > /dev/null 2>&1; then
              echo "✅ Frontend production deployed successfully!"
              echo "🌐 Production URL: ${{ secrets.PROD_FRONTEND_URL }}"
              exit 0
            fi
            echo "⏳ Health check $i/10... (waiting 15s)"
            sleep 15
          done

          echo "❌ Frontend production deployment failed!"
          exit 1

  # Notificación de producción completada
  production-complete:
    name: 🎉 Production Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy-backend-production, deploy-frontend-production]
    if: always() && (needs.deploy-backend-production.result == 'success' || needs.deploy-frontend-production.result == 'success')
    steps:
      - name: Notify production deployment
        run: |
          echo "🎉 PRODUCTION DEPLOYMENT COMPLETED! 🎉"
          echo "🌐 Frontend: ${{ secrets.PROD_FRONTEND_URL }}"
          echo "🔗 Backend: ${{ secrets.PROD_BACKEND_URL }}"
          echo ""
          echo "✅ Your users now have access to the latest changes!"
